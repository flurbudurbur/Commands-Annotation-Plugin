name: Publish to JitPack

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          
      - name: Extract version from pom.xml
        id: get-version
        run: |
          VERSION=$(grep -m 1 "<version>" pom.xml | sed -e 's/<version>\(.*\)<\/version>/\1/' | xargs)
          echo "POM_VERSION=$VERSION" >> $GITHUB_ENV
          echo "POM version: $VERSION"
          
      - name: Get latest release version
        id: get-latest-release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name 2>/dev/null || echo "none")
          if [ "$LATEST_RELEASE" = "none" ]; then
            echo "No releases found"
            echo "LATEST_RELEASE=0.0.0" >> $GITHUB_ENV
          else
            echo "Latest release: $LATEST_RELEASE"
            echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          fi
        continue-on-error: true
        
      - name: Compare versions
        id: compare-versions
        run: |
          if [ "${{ env.LATEST_RELEASE }}" != "${{ env.POM_VERSION }}" ]; then
            echo "Version changed from ${{ env.LATEST_RELEASE }} to ${{ env.POM_VERSION }}"
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "Version unchanged: ${{ env.POM_VERSION }}"
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi
          
      - name: Build with Maven
        if: env.VERSION_CHANGED == 'true'
        run: mvn -B package --file pom.xml
        
      - name: Create Release
        if: env.VERSION_CHANGED == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.POM_VERSION }}
          name: Release ${{ env.POM_VERSION }}
          body: |
            Release version ${{ env.POM_VERSION }}
            
            This release was automatically created by the CI/CD pipeline.
            
            To use this version in your project, add the JitPack repository and dependency:
            ```xml
            <repositories>
                <repository>
                    <id>jitpack.io</id>
                    <url>https://jitpack.io</url>
                </repository>
            </repositories>
            
            <dependencies>
                <dependency>
                    <groupId>com.github.flurbudurbur</groupId>
                    <artifactId>ranks-annotation-processor</artifactId>
                    <version>${{ env.POM_VERSION }}</version>
                </dependency>
            </dependencies>
            ```
          files: target/ranks-annotation-processor-${{ env.POM_VERSION }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Notify about JitPack build
        if: env.VERSION_CHANGED == 'true'
        run: |
          echo "New release ${{ env.POM_VERSION }} created. JitPack will build it automatically."
          echo "You can check the build status at https://jitpack.io/com/github/${{ github.repository }}/${{ env.POM_VERSION }}"
          # Trigger JitPack build by making a request to the JitPack API
          curl -s "https://jitpack.io/com/github/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ env.POM_VERSION }}/build.log"